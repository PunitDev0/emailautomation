"use client"

import { useState } from "react"
import { X, Download, Code, FileText, Mail, Copy, ExternalLink, Smartphone, Monitor, Tablet } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Dialog, DialogContent } from "@/components/ui/dialog"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Card, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Switch } from "@/components/ui/switch"
import { Label } from "@/components/ui/label"
import { toast } from "sonner"

export default function ExportModal({ isOpen, onClose, emailData, templateName = "Email Template", blocks = [] }) {
  const [copiedCode, setCopiedCode] = useState(false)
  const [selectedFormat, setSelectedFormat] = useState("html")
  const [previewDevice, setPreviewDevice] = useState("desktop")
  const [exportOptions, setExportOptions] = useState({
    includeInlineCSS: true,
    optimizeForMobile: true,
    includePreheader: false,
    minifyCode: false,
    includeComments: true,
  })

  const generateHTML = () => {
    const { includeInlineCSS, optimizeForMobile, includePreheader, includeComments } = exportOptions

    let html = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>${templateName}</title>`

    if (includeComments) {
      html += `
    <!-- Email Template Generated by Email Template Maker -->
    <!-- Template: ${templateName} -->
    <!-- Generated: ${new Date().toISOString()} -->`
    }

    html += `
    <style>
        /* Reset styles */
        body, table, td, p, a, li, blockquote {
            -webkit-text-size-adjust: 100%;
            -ms-text-size-adjust: 100%;
        }
        table, td {
            mso-table-lspace: 0pt;
            mso-table-rspace: 0pt;
        }
        img {
            -ms-interpolation-mode: bicubic;
            border: 0;
            height: auto;
            line-height: 100%;
            outline: none;
            text-decoration: none;
        }
        
        /* Email styles */
        body {
            margin: 0 !important;
            padding: 0 !important;
            background-color: #f4f4f4;
            font-family: Arial, sans-serif;
            line-height: 1.6;
        }
        .email-container {
            max-width: 600px;
            margin: 0 auto;
            background-color: #ffffff;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        .email-content {
            padding: 0;
        }`

    if (optimizeForMobile) {
      html += `
        
        /* Mobile responsive styles */
        @media only screen and (max-width: 600px) {
            .email-container {
                width: 100% !important;
                margin: 0 !important;
            }
            .mobile-padding {
                padding: 15px !important;
            }
            .mobile-text-center {
                text-align: center !important;
            }
            .mobile-full-width {
                width: 100% !important;
                display: block !important;
            }
            .mobile-hide {
                display: none !important;
            }
        }`
    }

    html += `
    </style>
</head>
<body>`

    if (includePreheader) {
      html += `
    <!-- Preheader text -->
    <div style="display: none; font-size: 1px; color: #fefefe; line-height: 1px; font-family: Arial, sans-serif; max-height: 0px; max-width: 0px; opacity: 0; overflow: hidden;">
        ${templateName} - Preview this email in your inbox
    </div>`
    }

    html += `
    <table role="presentation" cellspacing="0" cellpadding="0" border="0" width="100%">
        <tr>
            <td>
                <div class="email-container">
                    <div class="email-content">`

    // Generate blocks
    blocks.forEach((block, index) => {
      if (includeComments) {
        html += `
                        <!-- Block ${index + 1}: ${block.type} -->`
      }

      switch (block.type) {
        case "text":
          html += `
                        <table role="presentation" cellspacing="0" cellpadding="0" border="0" width="100%">
                            <tr>
                                <td class="mobile-padding" style="padding: 20px; ${includeInlineCSS ? `font-size: ${block.styles?.fontSize || 16}px; color: ${block.styles?.color || "#333333"}; text-align: ${block.styles?.textAlign || "left"};` : ""}">
                                    <p style="margin: 0; line-height: 1.5;">
                                        ${block.content?.text || "Sample text content"}
                                    </p>
                                </td>
                            </tr>
                        </table>`
          break

        case "image":
          if (block.content?.src) {
            html += `
                        <table role="presentation" cellspacing="0" cellpadding="0" border="0" width="100%">
                            <tr>
                                <td style="padding: 20px; text-align: ${block.styles?.textAlign || "center"};">
                                    <img src="${block.content.src}" 
                                         alt="${block.content.alt || ""}" 
                                         style="max-width: 100%; height: auto; display: block; margin: 0 auto; ${includeInlineCSS ? `border-radius: ${block.styles?.borderRadius || 0}px;` : ""}" 
                                         class="mobile-full-width" />
                                </td>
                            </tr>
                        </table>`
          }
          break

        case "button":
          html += `
                        <table role="presentation" cellspacing="0" cellpadding="0" border="0" width="100%">
                            <tr>
                                <td style="padding: 20px; text-align: ${block.styles?.textAlign || "center"};">
                                    <table role="presentation" cellspacing="0" cellpadding="0" border="0" style="margin: 0 auto;">
                                        <tr>
                                            <td style="background-color: ${block.styles?.backgroundColor || "#3b82f6"}; border-radius: ${block.styles?.borderRadius || 6}px; ${includeInlineCSS ? `box-shadow: 0 2px 4px rgba(0,0,0,0.1);` : ""}">
                                                <a href="${block.content?.href || "#"}" 
                                                   target="${block.content?.target || "_blank"}" 
                                                   style="display: inline-block; padding: 12px 24px; color: ${block.styles?.color || "#ffffff"}; text-decoration: none; font-weight: bold; font-size: ${block.styles?.fontSize || 16}px;">
                                                    ${block.content?.text || "Click Here"}
                                                </a>
                                            </td>
                                        </tr>
                                    </table>
                                </td>
                            </tr>
                        </table>`
          break

        case "divider":
          html += `
                        <table role="presentation" cellspacing="0" cellpadding="0" border="0" width="100%">
                            <tr>
                                <td style="padding: 20px;">
                                    <hr style="border: none; height: ${block.content?.thickness || 1}px; background-color: ${block.content?.color || "#e5e7eb"}; margin: 0;" />
                                </td>
                            </tr>
                        </table>`
          break

        case "spacer":
          html += `
                        <table role="presentation" cellspacing="0" cellpadding="0" border="0" width="100%">
                            <tr>
                                <td style="height: ${block.content?.height || 40}px; line-height: ${block.content?.height || 40}px;">&nbsp;</td>
                            </tr>
                        </table>`
          break

        case "columns":
          html += `
                        <table role="presentation" cellspacing="0" cellpadding="0" border="0" width="100%">
                            <tr>
                                <td style="padding: 20px;">
                                    <table role="presentation" cellspacing="0" cellpadding="0" border="0" width="100%">
                                        <tr>`

          block.content?.columns?.forEach((column, colIndex) => {
            const columnWidth = Math.floor(100 / block.content.columns.length)
            html += `
                                            <td width="${columnWidth}%" style="vertical-align: top; padding: 0 10px;" class="mobile-full-width">
                                                <p style="margin: 0; font-size: 14px; color: #333333;">
                                                    ${column.content || `Column ${colIndex + 1} content`}
                                                </p>
                                            </td>`
          })

          html += `
                                        </tr>
                                    </table>
                                </td>
                            </tr>
                        </table>`
          break

        case "social":
          html += `
                        <table role="presentation" cellspacing="0" cellpadding="0" border="0" width="100%">
                            <tr>
                                <td style="padding: 20px; text-align: center;">
                                    <table role="presentation" cellspacing="0" cellpadding="0" border="0" style="margin: 0 auto;">
                                        <tr>`

          const socialLinks = block.content?.links || [
            { platform: "facebook", url: "#", icon: "📘" },
            { platform: "twitter", url: "#", icon: "🐦" },
            { platform: "instagram", url: "#", icon: "📷" },
          ]

          socialLinks.forEach((link) => {
            html += `
                                            <td style="padding: 0 10px;">
                                                <a href="${link.url}" target="_blank" style="text-decoration: none; font-size: 24px;">
                                                    ${link.icon}
                                                </a>
                                            </td>`
          })

          html += `
                                        </tr>
                                    </table>
                                </td>
                            </tr>
                        </table>`
          break
      }
    })

    html += `
                    </div>
                </div>
            </td>
        </tr>
    </table>`

    if (includeComments) {
      html += `
    <!-- End of Email Template -->`
    }

    html += `
</body>
</html>`

    return exportOptions.minifyCode ? html.replace(/\s+/g, " ").trim() : html
  }

  const generatePlainText = () => {
    let text = `${templateName}\n${"=".repeat(templateName.length)}\n\n`

    blocks.forEach((block, index) => {
      switch (block.type) {
        case "text":
          text += `${block.content?.text || "Sample text content"}\n\n`
          break
        case "button":
          text += `[${block.content?.text || "Button"}] ${block.content?.href || "#"}\n\n`
          break
        case "divider":
          text += `${"─".repeat(50)}\n\n`
          break
        case "spacer":
          text += `\n`
          break
        case "columns":
          if (block.content?.columns) {
            block.content.columns.forEach((column, colIndex) => {
              text += `Column ${colIndex + 1}: ${column.content || "Column content"}\n`
            })
            text += `\n`
          }
          break
        case "social":
          text += `Follow us on social media:\n`
          const socialLinks = block.content?.links || []
          socialLinks.forEach((link) => {
            text += `${link.platform}: ${link.url}\n`
          })
          text += `\n`
          break
      }
    })

    text += `\n---\nGenerated by Email Template Maker\n${new Date().toLocaleString()}`
    return text
  }

  const generateAMPEmail = () => {
    return `<!doctype html>
<html ⚡4email>
<head>
  <meta charset="utf-8">
  <script async src="https://cdn.ampproject.org/v0.js"></script>
  <style amp4email-boilerplate>body{visibility:hidden}</style>
  <style amp-custom>
    .email-container { max-width: 600px; margin: 0 auto; }
    .content-block { padding: 20px; }
  </style>
</head>
<body>
  <div class="email-container">
    ${blocks
      .map((block) => {
        switch (block.type) {
          case "text":
            return `<div class="content-block"><p>${block.content?.text || "Sample text"}</p></div>`
          case "image":
            return block.content?.src
              ? `<div class="content-block"><amp-img src="${block.content.src}" alt="${block.content.alt || ""}" width="600" height="300" layout="responsive"></amp-img></div>`
              : ""
          case "button":
            return `<div class="content-block"><a href="${block.content?.href || "#"}" style="background: #3b82f6; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block;">${block.content?.text || "Button"}</a></div>`
          default:
            return ""
        }
      })
      .join("")}
  </div>
</body>
</html>`
  }

  const copyToClipboard = async (text, type) => {
    try {
      await navigator.clipboard.writeText(text)
      setCopiedCode(true)
      setTimeout(() => setCopiedCode(false), 2000)
      toast({
        title: "Copied! 📋",
        description: `${type} code copied to clipboard`,
      })
    } catch (err) {
      toast({
        title: "Copy Failed",
        description: "Unable to copy to clipboard",
        variant: "destructive",
      })
    }
  }

  const downloadFile = (content, filename, type) => {
    const blob = new Blob([content], { type })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = filename
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)

    toast({
      title: "Download Started! 📥",
      description: `${filename} is being downloaded`,
    })
  }

  const exportFormats = {
    html: {
      title: "HTML Email",
      description: "Production-ready HTML email code",
      icon: Code,
      color: "bg-blue-500",
      content: generateHTML(),
      filename: `${templateName.replace(/\s+/g, "-").toLowerCase()}.html`,
      type: "text/html",
    },
    text: {
      title: "Plain Text",
      description: "Text-only version for accessibility",
      icon: FileText,
      color: "bg-green-500",
      content: generatePlainText(),
      filename: `${templateName.replace(/\s+/g, "-").toLowerCase()}.txt`,
      type: "text/plain",
    },
    amp: {
      title: "AMP Email",
      description: "Interactive AMP email format",
      icon: Mail,
      color: "bg-purple-500",
      content: generateAMPEmail(),
      filename: `${templateName.replace(/\s+/g, "-").toLowerCase()}-amp.html`,
      type: "text/html",
    },
  }

  const currentFormat = exportFormats[selectedFormat]
  const deviceIcons = {
    desktop: Monitor,
    tablet: Tablet,
    mobile: Smartphone,
  }
  const DeviceIcon = deviceIcons[previewDevice]

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-6xl h-[90vh] p-0">
        <div className="flex flex-col h-full">
          {/* Header */}
          <div className="flex items-center justify-between p-6 border-b">
            <div className="flex items-center space-x-3">
              <div className="p-2 bg-gradient-to-br from-green-500 to-blue-600 rounded-lg">
                <Download className="w-5 h-5 text-white" />
              </div>
              <div>
                <h2 className="text-xl font-bold">Export Email Template</h2>
                <p className="text-sm text-gray-600 dark:text-gray-400">Download your email in various formats</p>
              </div>
            </div>
            <Button variant="ghost" size="sm" onClick={onClose}>
              <X className="w-4 h-4" />
            </Button>
          </div>

          {/* Content */}
          <div className="flex-1 overflow-hidden">
            <Tabs defaultValue="export" className="h-full flex flex-col">
              <TabsList className="grid w-full grid-cols-3 mx-6 mt-4">
                <TabsTrigger value="export">Export Options</TabsTrigger>
                <TabsTrigger value="preview">Live Preview</TabsTrigger>
                <TabsTrigger value="code">Code View</TabsTrigger>
              </TabsList>

              <div className="flex-1 overflow-y-auto p-6">
                <TabsContent value="export" className="mt-0 space-y-6">
                  {/* Format Selection */}
                  <div className="space-y-4">
                    <h3 className="text-lg font-semibold">Export Format</h3>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      {Object.entries(exportFormats).map(([key, format]) => (
                        <Card
                          key={key}
                          className={`cursor-pointer transition-all hover:shadow-md ${
                            selectedFormat === key ? "ring-2 ring-blue-500" : ""
                          }`}
                          onClick={() => setSelectedFormat(key)}
                        >
                          <CardHeader className="pb-3">
                            <div className="flex items-center space-x-3">
                              <div className={`p-2 ${format.color} rounded-lg`}>
                                <format.icon className="w-5 h-5 text-white" />
                              </div>
                              <div>
                                <CardTitle className="text-base">{format.title}</CardTitle>
                                <p className="text-sm text-gray-600">{format.description}</p>
                              </div>
                            </div>
                          </CardHeader>
                        </Card>
                      ))}
                    </div>
                  </div>

                  {/* Export Options */}
                  <div className="space-y-4">
                    <h3 className="text-lg font-semibold">Export Settings</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="space-y-4">
                        <div className="flex items-center justify-between">
                          <Label htmlFor="inline-css">Include Inline CSS</Label>
                          <Switch
                            id="inline-css"
                            checked={exportOptions.includeInlineCSS}
                            onCheckedChange={(checked) =>
                              setExportOptions((prev) => ({ ...prev, includeInlineCSS: checked }))
                            }
                          />
                        </div>

                        <div className="flex items-center justify-between">
                          <Label htmlFor="mobile-optimize">Optimize for Mobile</Label>
                          <Switch
                            id="mobile-optimize"
                            checked={exportOptions.optimizeForMobile}
                            onCheckedChange={(checked) =>
                              setExportOptions((prev) => ({ ...prev, optimizeForMobile: checked }))
                            }
                          />
                        </div>

                        <div className="flex items-center justify-between">
                          <Label htmlFor="preheader">Include Preheader</Label>
                          <Switch
                            id="preheader"
                            checked={exportOptions.includePreheader}
                            onCheckedChange={(checked) =>
                              setExportOptions((prev) => ({ ...prev, includePreheader: checked }))
                            }
                          />
                        </div>
                      </div>

                      <div className="space-y-4">
                        <div className="flex items-center justify-between">
                          <Label htmlFor="minify">Minify Code</Label>
                          <Switch
                            id="minify"
                            checked={exportOptions.minifyCode}
                            onCheckedChange={(checked) =>
                              setExportOptions((prev) => ({ ...prev, minifyCode: checked }))
                            }
                          />
                        </div>

                        <div className="flex items-center justify-between">
                          <Label htmlFor="comments">Include Comments</Label>
                          <Switch
                            id="comments"
                            checked={exportOptions.includeComments}
                            onCheckedChange={(checked) =>
                              setExportOptions((prev) => ({ ...prev, includeComments: checked }))
                            }
                          />
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* Export Actions */}
                  <div className="flex flex-wrap gap-3">
                    <Button
                      onClick={() => downloadFile(currentFormat.content, currentFormat.filename, currentFormat.type)}
                      className="flex items-center space-x-2"
                    >
                      <Download className="w-4 h-4" />
                      <span>Download {currentFormat.title}</span>
                    </Button>

                    <Button
                      variant="outline"
                      onClick={() => copyToClipboard(currentFormat.content, currentFormat.title)}
                      className="flex items-center space-x-2"
                    >
                      <Copy className="w-4 h-4" />
                      <span>{copiedCode ? "Copied!" : "Copy Code"}</span>
                    </Button>

                    <Button
                      variant="outline"
                      onClick={() => {
                        const blob = new Blob([currentFormat.content], { type: currentFormat.type })
                        const url = URL.createObjectURL(blob)
                        window.open(url, "_blank")
                        URL.revokeObjectURL(url)
                      }}
                      className="flex items-center space-x-2"
                    >
                      <ExternalLink className="w-4 h-4" />
                      <span>Open in New Tab</span>
                    </Button>
                  </div>
                </TabsContent>

                <TabsContent value="preview" className="mt-0 space-y-4">
                  <div className="flex items-center justify-between">
                    <h3 className="text-lg font-semibold">Live Preview</h3>
                    <div className="flex items-center space-x-2">
                      <Label>Device:</Label>
                      <Select value={previewDevice} onValueChange={setPreviewDevice}>
                        <SelectTrigger className="w-32">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="desktop">
                            <div className="flex items-center space-x-2">
                              <Monitor className="w-4 h-4" />
                              <span>Desktop</span>
                            </div>
                          </SelectItem>
                          <SelectItem value="tablet">
                            <div className="flex items-center space-x-2">
                              <Tablet className="w-4 h-4" />
                              <span>Tablet</span>
                            </div>
                          </SelectItem>
                          <SelectItem value="mobile">
                            <div className="flex items-center space-x-2">
                              <Smartphone className="w-4 h-4" />
                              <span>Mobile</span>
                            </div>
                          </SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  <div className="border rounded-lg overflow-hidden">
                    <div
                      className={`mx-auto transition-all duration-300 ${
                        previewDevice === "mobile" ? "max-w-sm" : previewDevice === "tablet" ? "max-w-md" : "max-w-2xl"
                      }`}
                    >
                      <iframe srcDoc={currentFormat.content} className="w-full h-96 border-0" title="Email Preview" />
                    </div>
                  </div>

                  <div className="flex items-center space-x-2 text-sm text-gray-600">
                    <DeviceIcon className="w-4 h-4" />
                    <span>Preview optimized for {previewDevice} devices</span>
                  </div>
                </TabsContent>

                <TabsContent value="code" className="mt-0 space-y-4">
                  <div className="flex items-center justify-between">
                    <h3 className="text-lg font-semibold">Generated Code</h3>
                    <div className="flex items-center space-x-2">
                      <Badge variant="outline">{currentFormat.title}</Badge>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => copyToClipboard(currentFormat.content, currentFormat.title)}
                      >
                        <Copy className="w-4 h-4 mr-1" />
                        {copiedCode ? "Copied!" : "Copy"}
                      </Button>
                    </div>
                  </div>

                  <Textarea
                    value={currentFormat.content}
                    readOnly
                    className="font-mono text-sm h-96 resize-none"
                    placeholder="Generated code will appear here..."
                  />

                  <div className="text-sm text-gray-600">
                    <p>Code size: {new Blob([currentFormat.content]).size} bytes</p>
                    <p>Lines: {currentFormat.content.split("\n").length}</p>
                  </div>
                </TabsContent>
              </div>
            </Tabs>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  )
}
